# ==== mybot/handlers/user.py ====
# –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω command, FSM registration, checkin/checkout –±–æ–ª–æ–Ω –∑—É—Ä–∞–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from mybot import dp
from services.registration import is_telegram_id_registered, get_register_number_by_telegram_id
from sheets.employees import find_employee_register_row, register_employee_telegram_id
from sheets.attendance import add_register, add_checkin, add_checkout
from utils.geo import find_nearest_office
from config import SHEET_URL_LOCATION, CREDS_FILE, WORKSHEET_NAME
from sheets.base import get_offices_from_sheet

# FSM-–∏–π–Ω “Ø–µ —à–∞—Ç—É—É–¥
class RegisterStates(StatesGroup):
    waiting_for_register_number = State()
    waiting_for_confirm = State()

class CheckoutStates(StatesGroup):
    waiting_for_location = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    
# /register command –∞—à–∏–≥–ª–∞–Ω –±“Ø—Ä—Ç–≥—ç–ª —ç—Ö–ª“Ø“Ø–ª—ç—Ö
@dp.message_handler(commands=['register'])
async def register_handler(message: types.Message):
    user = message.from_user
    if is_telegram_id_registered(user.id):
        await message.reply("–¢–∞ ”©–º–Ω”© –Ω—å –±“Ø—Ä—Ç–≥“Ø“Ø–ª—Å—ç–Ω –±–∞–π–Ω–∞.")
        return
    await message.reply(
        "‚ÄºÔ∏è <b>–†–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä—ã–Ω —ç—Ö–Ω–∏–π —Ö–æ—ë—Ä “Ø—Å–≥–∏–π–≥ –¢–û–ú “Ø—Å–≥—ç—ç—Ä –±–∏—á–Ω—ç “Ø“Ø!</b>\n"
        "–ñ–∏—à—ç—ç: <code>–ê–ê88888888</code> (AA –Ω—å —Ç–æ–º “Ø—Å–≥—ç—ç—Ä)\n\n"
        "”®”©—Ä–∏–π–Ω —Ä–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä-–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:",
        parse_mode="HTML"
    )
    await RegisterStates.waiting_for_register_number.set()

# –†–µ–≥–∏—Å—Ç—Ä —à–∞–ª–≥–∞—Ö, –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–≤—á —Ö–∞—Ä–∞–≥–¥—É—É–ª–∞—Ö
@dp.message_handler(state=RegisterStates.waiting_for_register_number)
async def get_register_number(message: types.Message, state: FSMContext):
    register_number = message.text.strip()
    row_number, row = find_employee_register_row(register_number)
    if not row_number:
        await message.reply("–ë“Ø—Ä—Ç–≥—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
        return
    if row['telegram_user_id']:
        await message.reply("–≠–Ω—ç —Ä–µ–≥–∏—Å—Ç–µ—Ä –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.")
        return
    await state.update_data(register_number=register_number)
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö", callback_data="confirm_register"),
        InlineKeyboardButton("‚ùå –ë—É—Ü–∞—Ö", callback_data="back_register")
    )
    await message.reply(f"–û–≤–æ–≥: {row['last_name']}\n–ù—ç—Ä: {row['first_name']}", reply_markup=kb)
    await RegisterStates.waiting_for_confirm.set()

# –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö —Ç–æ–≤—á–Ω—ã callback
@dp.callback_query_handler(state=RegisterStates.waiting_for_confirm)
async def process_register_confirm_callback(query: types.CallbackQuery, state: FSMContext):
    if query.data == "confirm_register":
        data = await state.get_data()
        register_number = data['register_number']
        telegram_user_id = query.from_user.id
        username = query.from_user.username or ""
        _, row = find_employee_register_row(register_number)
        add_register(telegram_user_id, username, register_number, row['last_name'], row['first_name'])
        register_employee_telegram_id(register_number, telegram_user_id)
        await query.message.edit_text("–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π.")
        await state.finish()
    elif query.data == "back_register":
        await state.finish()
        await query.message.edit_text("–†–µ–≥–∏—Å—Ç–µ—Ä–∏–π–Ω –¥—É–≥–∞–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω –æ—Ä—É—É–ª–Ω–∞ —É—É.")
        await RegisterStates.waiting_for_register_number.set()

# /checkin –∫–æ–º–∞–Ω–¥, –±–∞–π—Ä—à–∏–ª –∞–≤–∞—Ö
@dp.message_handler(commands=['checkin'])
async def checkin_handler(message: types.Message):
    await message.reply(
        "üö© –ë–∞–π—Ä—à–ª–∞–∞ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø!\n\n"
        "‚ùóÔ∏è –ó”©–≤—Ö”©–Ω \"Live Location\" (—Ö”©–¥”©–ª–≥”©”©–Ω—Ç –±–∞–π—Ä—à–∏–ª) –∏–ª–≥—ç—ç–Ω—ç.\n\n"
        "–î–æ–æ—Ä—Ö –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø:\n"
        "1. üìé (Attach) –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞\n"
        "2. Location ‚Üí Share live location for ... –≥—ç–∂ —Å–æ–Ω–≥–æ–Ω–æ"
    )

  # –ë–∞–π—Ä—à–∏–ª —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞—Ö “Ø–µ–¥ checkin —Ö–∏–π—Ö
@dp.message_handler(content_types=['location'])
async def location_handler(message: types.Message):
    loc = message.location
    # –ó–∞–∞–≤–∞–ª live_location —à–∞–ª–≥–∞–Ω–∞
    if not loc.live_period:
        await message.reply(
            "‚ÄºÔ∏è –¢–∞ –∑–∞–∞–≤–∞–ª 'Live Location' (—Ö”©–¥”©–ª–≥”©”©–Ω—Ç –±–∞–π—Ä—à–∏–ª) –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø!\n\n"
            "–î–æ–æ—Ä—Ö –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø:\n"
            "1. üìé (Attach) –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞\n"
            "2. Location ‚Üí Share live location for ... –≥—ç–∂ —Å–æ–Ω–≥–æ–Ω–æ"
    )
        return
    user = message.from_user
    register_number = get_register_number_by_telegram_id(user.id)

    offices = get_offices_from_sheet(SHEET_URL_LOCATION, CREDS_FILE, WORKSHEET_NAME)
    is_inside, office_name, distance = find_nearest_office(loc.latitude, loc.longitude, offices)

    if not is_inside:
        await message.reply("–¢–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω —Ä–∞–¥–∏—É—Å –¥–æ—Ç–æ—Ä –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    add_checkin(
        user.id, 
        user.username or "", 
        register_number,
        user.last_name or "", 
        user.first_name or "",
        loc.latitude, 
        loc.longitude,
        office_name
    )
    await message.reply(f"Checkin –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç. –ë–∞–π—Ä—à–∏–ª: {office_name}, –ó–∞–π: {int(distance)}–º", reply_markup=ReplyKeyboardRemove())

# 1. /checkout –∫–æ–º–∞–Ω–¥ ‚Äì —ç—Ö–ª—ç—ç–¥ –∑—É—Ä–∞–≥ –∏–ª–≥—ç—ç—Ö–∏–π–≥ –∞—Å—É—É–Ω–∞
@dp.message_handler(commands=['checkout'])
async def checkout_handler(message: types.Message):
    await message.reply(
        "üö© –ë–∞–π—Ä—à–ª–∞–∞ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø!\n\n"
        "‚ùóÔ∏è –ó”©–≤—Ö”©–Ω \"Live Location\" (—Ö”©–¥”©–ª–≥”©”©–Ω—Ç –±–∞–π—Ä—à–∏–ª) –∏–ª–≥—ç—ç–Ω—ç.\n\n"
        "–î–æ–æ—Ä—Ö –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø:\n"
        "1. üìé (Attach) –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞\n"
        "2. Location ‚Üí Share live location for ... –≥—ç–∂ —Å–æ–Ω–≥–æ–Ω–æ"
    )
    await CheckoutStates.waiting_for_location.set()

# –ë–∞–π—Ä—à–∏–ª —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞—Ö “Ø–µ–¥ –∞–∂–ª—ã–Ω –∑—É—Ä–∞–≥ –∞—Å—É—É–Ω–∞.
@dp.message_handler(content_types=['location'], state=CheckoutStates.waiting_for_location)
async def process_checkout_location(message: types.Message, state: FSMContext):
    loc = message.location
    offices = get_offices_from_sheet(SHEET_URL_LOCATION, CREDS_FILE, WORKSHEET_NAME)
    is_inside, office_name, distance = find_nearest_office(loc.latitude, loc.longitude, offices)

    if not is_inside:
        await message.reply("–¢–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω —Ä–∞–¥–∏—É—Å –¥–æ—Ç–æ—Ä –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
        return
    if not loc.live_period:
        await message.reply(
            "‚ÄºÔ∏è –¢–∞ –∑–∞–∞–≤–∞–ª 'Live Location' (—Ö”©–¥”©–ª–≥”©”©–Ω—Ç –±–∞–π—Ä—à–∏–ª) –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø!\n\n"
            "–î–æ–æ—Ä—Ö –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø:\n"
            "1. üìé (Attach) –¥—ç—ç—Ä –¥–∞—Ä–Ω–∞\n"
            "2. Location ‚Üí Share live location for ... –≥—ç–∂ —Å–æ–Ω–≥–æ–Ω–æ"
    )
        return

    await state.update_data(latitude=loc.latitude, longitude=loc.longitude)
    await state.update_data(office_name=office_name)
    await message.reply("–û–¥–æ–æ –∞–∂–ª—ã–Ω –∑—É—Ä–≥–∏–π–≥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø:", reply_markup=ReplyKeyboardRemove())
    await CheckoutStates.waiting_for_photo.set()

# –ê–∂–ª—ã–Ω –∑—É—Ä–∞–≥ —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞—Ö “Ø–µ–¥ –∞–∂–ª—ã–Ω —Ç–∞–π–ª–±–∞—Ä –∞—Å—É—É–Ω–∞.
@dp.message_handler(content_types=['photo'], state=CheckoutStates.waiting_for_photo)
async def process_checkout_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_ids = data.get('photo_file_ids', [])  # ”©–º–Ω”© —Ü—É–≥–ª–∞—Ä—Å–∞–Ω –∑—É—Ä–∞–≥ –±–∞–π–≤–∞–ª –∞–≤–Ω–∞
    photo_ids.append(message.photo[-1].file_id)  # —à–∏–Ω—ç –∑—É—Ä–∞–≥ –±“Ø—Ä–∏–π–≥ list-–¥ –Ω—ç–º–Ω—ç
    await state.update_data(photo_file_ids=photo_ids)  # list-–∏–π–≥ state-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞
    await message.reply("–ê–∂–ª—ã–Ω —Ç–∞–π–ª–±–∞—Ä—ã–≥ –±–∏—á–Ω—ç “Ø“Ø:")
    await CheckoutStates.waiting_for_description.set()

@dp.message_handler(state=CheckoutStates.waiting_for_photo)
async def photo_required_warning(message: types.Message, state: FSMContext):
    await message.reply("‚ÄºÔ∏è –ó–∞–∞–≤–∞–ª –∑—É—Ä–∞–≥ –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø! üì∑")


# –ê–∂–ª—ã–Ω —Ç–∞–π–ª–±–∞—Ä —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞—Ö “Ø–µ–¥ Checkout —Ö–∏–π–Ω—ç.
@dp.message_handler(state=CheckoutStates.waiting_for_description)
async def process_checkout_description(message: types.Message, state: FSMContext):
    user = message.from_user   # –≠–Ω—ç –º”©—Ä–∏–π–≥ —Ö–∞–º–≥–∏–π–Ω —ç—Ö—ç–Ω–¥ –Ω—ç–º—ç—Ö —ë—Å—Ç–æ–π!
    description = message.text
    data = await state.get_data()
    latitude = data.get("latitude")
    longitude = data.get("longitude")
    register_number = get_register_number_by_telegram_id(user.id)
    office_name = data.get("office_name")
    photo_file_ids = data.get('photo_file_ids', [])
    photo_ids_str = ','.join(photo_file_ids)

    add_checkout(
        user.id,
        user.username or "",
        register_number,
        user.last_name or "",
        user.first_name or "",
        latitude,
        longitude,
        description,
        photo_ids_str,
        office_name
    )
    await message.reply("Checkout –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç!", reply_markup=ReplyKeyboardRemove())
    await state.finish()



@dp.message_handler(lambda msg: msg.text in [
    "üìù –®–∏–Ω—ç—ç—Ä –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö",
    "‚úÖ –ê–∂–∏–ª –≠–•–≠–õ–°–≠–ù —Ü–∞–≥ –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö",
    "üèÅ –ê–∂–∏–ª –î–£–£–°–°–ê–ù —Ü–∞–≥ –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö"
])
async def menu_text_router(message: types.Message):
    if message.text == "üìù –®–∏–Ω—ç—ç—Ä –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö":
        await register_handler(message)
    elif message.text == "‚úÖ –ê–∂–∏–ª –≠–•–≠–õ–°–≠–ù —Ü–∞–≥ –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö":
        await checkin_handler(message)
    elif message.text == "üèÅ –ê–∂–∏–ª –î–£–£–°–°–ê–ù —Ü–∞–≥ –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö":
        await checkout_handler(message)

